#!/bin/bash
## **********************************************************************************
## 
## Name:    droid
## Author:  Gabriel Gonzalez, ADB Devs.
## Email:   gabeg@bu.edu
## License: The MIT License (MIT)
## 
## Syntax: droid [option] [argument]
## 
## Description: An Android file transfer service.
##              
## Notes: None.
## 
## Notice: I did not write any of the ADB software, thus I cannot take credit for
##         that code. The ADB license might not use The MIT License (MIT), thus this
##         license only applies to the lines of code that do not contain the "adb"
##         command.
## 
## **********************************************************************************

## ================
## GLOBAL VARIABLES
## ================

## Program information
IFS=$'\n'
ARGV=("$@")
PROG_NAME=`basename $0`
PROG_DIR=`echo "$0" | sed "s/\/${PROG_NAME}$//"`

## Music directories
COMP_MUSIC_DIR="/mnt/Linux/Share/Music"
PHONE_MUSIC_DIR="/sdcard/Music"

## #################################
## ##### ANDROID FILE TRANSFER #####
## #################################

## Transfer files between the computer and Android device
main() {
    case "${ARGV[0]}" in
        ""|"-h"|"--help")
            usage
            exit 0
            ;;
        "-c"|"--connect")
            enable_adb
            exit 0
            ;;
        "-r"|"--receive")
            enable_adb
            file_copy "pull"
            ;;
        "-t"|"--transfer")
            enable_adb
            file_copy "push"
            ;;
        "-ls")
            adb shell ls "$(get_destination)" 2> /dev/null
            exit 0
            ;;
        "-s"|"--sync")
            music_sync
            ;;
        *)
            usage 1>&2
            exit 1
            ;;
    esac
}

## ###############################
## ##### PRINT PROGRAM USAGE #####
## ###############################

## Print program usage
usage() {
    echo "Usage: ${PROG_NAME} [option] <argument>"
    echo 
    echo "Options:"
    echo "    -h, --help                    Print program usage"
    echo "    -r, --receive <src> <dst>     Receive files from the Android device (pull)"
    echo "    -t, --transfer <src> <dst>    Transfer files to the Android device (push)"
    echo "    -s, --sync                    Sync music files from computer to Android device."
    echo
    echo "Arguments:"
    echo "    <src>                         Source directory"
    echo "    <dst>                         Destination directory"
}

## #################################
## ##### ANDROID FILE TRANSFER #####
## #################################

## Start android debugger
enable_adb() {
    echo -n ":: Starting adb..."
    adb devices 1> /dev/null 

    if [ "$(is_adb)" == true ]; then
        echo "Done."
    else
        echo "Fail."
        exit 1
    fi
}

## Send files onto Android device
file_copy() {
    last=$[ ${#ARGV[@]} - 2 ]
    dst="$(get_destination)"

    for item in "${ARGV[@]:1:${last}}"; do
        if [[ "${item}" != "${dst}" ]]; then
            echo -n ":: Copying '${item}'  ->  '${dst}'..." 
            adb "$1" "${item}" "${dst}" 
        fi
    done
}

## Sync music files from laptop to phone
music_sync() {
    echo ":: Syncing music to Android device..."
    music_sync_remove_songs
    music_sync_add_songs
}

## Remove songs that don't need to be sync-ed
music_sync_remove_songs() {
    all_playlists=(`ls -1 "${COMP_MUSIC_DIR}"`)
    all_phone_files=(`adb shell ls "${PHONE_MUSIC_DIR}" | sed 's/\n//g; s/\r//g'`)

    ## Search through phone music contents for unmatched files
    for file in "${all_phone_files[@]}"; do
        playlist_match=`echo "${all_playlists[*]}" | grep -x -c "${file}"`

        ## Found playlist match
        if [ ${playlist_match} -eq 1 ]; then
            all_content=(`adb shell ls "${PHONE_MUSIC_DIR}/${file}" | sed 's/\n//g; s/\r//g'`)
            all_songs=(`ls -1 "${COMP_MUSIC_DIR}/${file}"`)

            ## Remove unmatched songs
            for content in "${all_content[@]}"; do
                song_match=`echo "${all_songs[*]}" | grep -x -c "${content}"`

                if [ ${song_match} -ne 1 ]; then
                    echo -n ":: Removing '${file}'..."
                    adb shell rm -rf "${PHONE_MUSIC_DIR}/${file}/${content}"
                    echo "Done."
                fi
            done
        ## Remove unmatched playlist
        else
            echo -n ":: Removing '${file}'..."
            adb shell rm -rf "${PHONE_MUSIC_DIR}/${file}"
            echo "Done."
        fi
    done
}

## Add songs that need to be sync-ed
music_sync_add_songs() {
    all_playlists=(`ls -1 "${COMP_MUSIC_DIR}"`)
    all_phone_files=(`adb shell ls "${PHONE_MUSIC_DIR}" | sed 's/\n//g; s/\r//g'`)

    ## Search through phone music contents for unmatched files
    for playlist in "${all_playlists[@]}"; do
        playlist_match=`echo "${all_phone_files[*]}" | grep -x -c "${playlist}"`

        ## Found playlist match
        if [ ${playlist_match} -eq 1 ]; then
            all_content=(`adb shell ls "${PHONE_MUSIC_DIR}/${playlist}" | sed 's/\n//g; s/\r//g'`)
            all_songs=(`ls -1 "${COMP_MUSIC_DIR}/${playlist}"`)

            ## Add unmatched songs
            for song in "${all_songs[@]}"; do
                song_match=`echo "${all_content[*]}" | grep -x -c "${song}"`

                if [ ${song_match} -ne 1 ]; then
                    echo -n ":: Adding song to playlist '${song}' -> '${playlist}'..."
                    adb push "${COMP_MUSIC_DIR}/${playlist}/${song}" "${PHONE_MUSIC_DIR}/${playlist}/"
                fi
            done
        ## Add unmatched playlist
        else
            echo -n ":: Adding playlist '${playlist}'..."
            adb shell mkdir "${PHONE_MUSIC_DIR}/${playlist}"
            echo "Done."
        fi
    done
}

## ########################################
## ##### SOURCE/DESTINATION DIRECTORY #####
## ########################################

## Return the destination directory
get_destination() {
    last=$[ ${#ARGV[@]} - 1 ]
    dst="${ARGV[${last}]}"

    if [ "$(is_directory "${dst}")" = false ]; then
        echo "${PROG_NAME}: Destination directory '${dst}' does not exist." 1>&2
        exit 1
    fi

    echo "${dst}"
}

## Check if adb was enabled successfully
is_adb() {
    tst=`adb shell ls &> /dev/null`
    if [ $? -eq 0 ]; then
        echo true
    else
        echo false
    fi
}

## Check if input is a directory
is_directory() {
    dir=`adb shell ls -d "${1}" 2>&1 \
             | grep -c "No such file or directory\|device not found"`

    if [ "${dir}" -eq 0 ]; then
        echo true
    else
        echo false
    fi
}

## ============
## Execute Main
## ============

main 
